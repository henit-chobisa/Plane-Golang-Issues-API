// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: workspace.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO "workspaces" ("id", "name", "slug", "created_by_id")
VALUES (gen_random_uuid(), $1, $2, $3)
RETURNING id, name, slug, created_by_id
`

type CreateWorkspaceParams struct {
	Name        string    `json:"name"`
	Slug        string    `json:"slug"`
	CreatedByID uuid.UUID `json:"created_by_id"`
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, createWorkspace, arg.Name, arg.Slug, arg.CreatedByID)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedByID,
	)
	return i, err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT id, name, slug, created_by_id FROM "workspaces" WHERE "id" = $1
`

func (q *Queries) GetWorkspace(ctx context.Context, id uuid.UUID) (Workspace, error) {
	row := q.db.QueryRowContext(ctx, getWorkspace, id)
	var i Workspace
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Slug,
		&i.CreatedByID,
	)
	return i, err
}

const updateWorkspace = `-- name: UpdateWorkspace :exec
UPDATE "workspaces"
SET "name" = $2, "slug" = $3
WHERE "id" = $1
`

type UpdateWorkspaceParams struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
	Slug string    `json:"slug"`
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) error {
	_, err := q.db.ExecContext(ctx, updateWorkspace, arg.ID, arg.Name, arg.Slug)
	return err
}
